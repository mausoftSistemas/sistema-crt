version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: sistema-crt-db-dev
    environment:
      POSTGRES_DB: sistema_crt
      POSTGRES_USER: crt_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crt_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - crt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crt_user -d sistema_crt"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sistema-crt-backend-dev
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgresql://crt_user:${POSTGRES_PASSWORD:-crt_password}@postgres:5432/sistema_crt
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: ./uploads
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - crt_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
    container_name: sistema-crt-frontend-dev
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - crt_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local

networks:
  crt_network:
    driver: bridge